name: Memotag API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Test with pytest
      run: |
        pytest

  find-service-id:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      service_id: ${{ steps.extract-id.outputs.service_id }}
    steps:
    - name: Check available Render services
      id: list-services
      run: |
        echo "Checking all available services with your API key..."
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" https://api.render.com/v1/services)
        echo "$RESPONSE" > services.json
        
        # Extract service IDs
        echo "Available service IDs:"
        cat services.json | grep -o '"id":"[^"]*"' || echo "No service IDs found"
        
        # Extract service names
        echo "Available service names:"
        cat services.json | grep -o '"name":"[^"]*"' || echo "No service names found"

        # Look for service with URL memotag-8lja.onrender.com
        cat services.json | grep -A 3 "memotag-8lja.onrender.com" || echo "Service URL not found"

    - name: Extract service ID
      id: extract-id
      run: |
        RESPONSE=$(cat services.json)
        
        # Try to find service by URL or substring match in the name
        SERVICE_DATA=$(echo "$RESPONSE" | grep -A 10 "memotag" || echo "")
        
        if [ -z "$SERVICE_DATA" ]; then
          echo "Could not find any service matching 'memotag'. Using fallback method."
          # Just take the first service ID as fallback
          SERVICE_ID=$(echo "$RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
        else
          # Extract the service ID
          SERVICE_ID=$(echo "$SERVICE_DATA" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
        fi
        
        if [ -z "$SERVICE_ID" ]; then
          echo "No service ID found. Please check your Render API key and account."
          exit 1
        else
          echo "Found service ID: $SERVICE_ID"
          echo "service_id=$SERVICE_ID" >> $GITHUB_OUTPUT
        fi

  deploy:
    needs: [test, find-service-id]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render using direct API
      run: |
        echo "Deploying service with ID: ${{ needs.find-service-id.outputs.service_id }}"
        DEPLOY_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          https://api.render.com/v1/services/${{ needs.find-service-id.outputs.service_id }}/deploys)
        
        echo "Deployment response:"
        echo "$DEPLOY_RESPONSE"
        
        # Check if deployment was successful
        if echo "$DEPLOY_RESPONSE" | grep -q '"id":'; then
          echo "Deployment successfully triggered!"
        else
          echo "Deployment failed. Please check the error message and your service ID."
          echo "Error: $DEPLOY_RESPONSE"
          exit 1
        fi
